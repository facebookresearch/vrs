name: Deployment

on:
  # this workflow can only be manually triggered for now.
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Where to deploy the artifacts? Only build (build), deploy to test PyPI (test), or deploy to PyPI (prod).'
        required: true
        type: choice
        default: 'test'
        options:
          - build
          - test
          - prod

jobs:
  build-bin-macos:
    if: github.repository == 'facebookresearch/vrs'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          brew install ninja cmake ccache googletest glog fmt cereal \
            jpeg-turbo libpng \
            lz4 zstd xxhash \
            boost \
            portaudio pybind11

      - name: Install python dependencies
        run: |
          pip install -U pip
          pip install numpy typing dataclasses pytest parameterized Pillow
          pip install --upgrade build setuptools setuptools_scm wheel

      # - name: Build packages (wheel and source distribution)
      #   run: |
      #     python -m build --sdist --wheel --outdir dist/ pyvrs
      #     ls -l dist
      # - name: Store the binary wheel
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: python-package-distributions
      #     path: dist

  # TODO: Linux needs to be built with manylinux. Although VRS doesn't build well with manylinux due to library versions.
  #       Set up an install scripts for libraries instead of using yum that installs older version.
  build-bin-linux:
    if: github.repository == 'facebookresearch/vrs'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get upgrade
          sudo apt-get install -o Acquire::Retries=5 \
            cmake ninja-build ccache libgtest-dev libfmt-dev libcereal-dev \
            libturbojpeg-dev libpng-dev \
            liblz4-dev libzstd-dev libxxhash-dev \
            libboost-system-dev libboost-filesystem-dev libboost-thread-dev libboost-chrono-dev libboost-date-time-dev \
            portaudio19-dev
      - name: Install python dependencies
        run: |
          pip install -U pip
          pip install pybind11[global]
          pip install numpy typing dataclasses pytest parameterized Pillow
          pip install --upgrade build setuptools setuptools_scm wheel

      # - name: Build packages (wheel and source distribution)
      #   run: |
      #     python -m build --sdist --wheel --outdir dist/ pyvrs
      #     ls -l dist
      # Keep linux build to make sure it's working but not upload it to dist to avoid error on upload to pypi.
      # pypi doesn't accept wheel that's not built in manylinux...
      # - name: Store the binary wheel
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: python-package-distributions
      #     path: dist

  # publish-to-pypi:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-bin-macos
  #     # - build-bin-linux # broken
  #   steps:
  #   - name: Download wheels from previous jobs
  #     # by default this will download all artifacts
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: python-package-distributions
  #       # PyPI publish action uploads everything under dist/* by default
  #       path: dist

  #   - name: Display the list of artifacts
  #     run: ls -R dist

  #   - name: Publish to Test PyPI
  #     if: github.event.inputs.deploy == 'test'
  #     uses: pypa/gh-action-pypi-publish@v1.4.2
  #     with:
  #       user: __token__
  #       password: ${{ secrets.TEST_PYPI_TOKEN }}
  #       repository_url: https://test.pypi.org/legacy/
  #       skip_existing: true
  #       verbose: true

  #   - name: Publish to PyPI
  #     if: github.event.inputs.deploy == 'prod' && startsWith(github.ref, 'refs/tags')
  #     uses: pypa/gh-action-pypi-publish@v1.4.2
  #     with:
  #       user: __token__
  #       password: ${{ secrets.PYPI_TOKEN }}
  #       verbose: true
