load("//arvr/tools/build_defs:oxx.bzl", "oxx_static_library", "oxx_test")
load("//arvr/tools/build_defs:utils.bzl", "read_config_bool")

is_cmake_generator = read_config_bool("ovr_config", "cmake_generator", False)

OCEAN_DEP = [] if is_cmake_generator else [
    "//xplat/compphoto/ocean:ocean_base",
    "//xplat/compphoto/ocean:ocean_cv",
]

oxx_static_library(
    name = "strings",
    srcs = [
        "Strings.cpp",
    ],
    ovrsource_only = False,
    public_include_directories = [
        "../..",
    ],
    public_raw_headers = [
        "Strings.h",
        "EnumStringConverter.h",
    ],
    visibility = ["PUBLIC"],
    deps = ["//arvr/libraries/portability:portability"],
)

oxx_static_library(
    name = "utils",
    srcs = [
        "AsyncImageFilter.cpp",
        "CopyHelpers.cpp",
        "CopyRecords.cpp",
        "FilteredVRSFileReader.cpp",
        "ImageFilter.cpp",
        "PlaybackThread.cpp",
        "Validation.cpp",
    ],
    compatible_with = [
        "ovr_config//os:android",
        "ovr_config//os:linux",
        "ovr_config//os:windows",
        "ovr_config//os:macos",
        "ovr_config//os:iphoneos",
        "ovr_config//os:appletvos",
        "ovr_config//os:watchos",
    ],
    # fbandroid currently builds without exceptions, although this is up for debate.
    # See also https://fb.workplace.com/groups/119362950048410/permalink/120488773269161/.
    fbandroid_compiler_flags = [
        "-fexceptions",
    ],
    ovrsource_only = False,
    public_include_directories = [
        "../..",
    ],
    public_raw_headers = [
        "AsyncImageFilter.h",
        "CopyHelpers.h",
        "CopyRecords.h",
        "FilteredVRSFileReader.h",
        "ImageFilter.h",
        "PlaybackThread.h",
        "Validation.h",
    ],
    visibility = ["PUBLIC"],
    deps = [
        ":images",
        "//arvr/libraries/logging:logging",
        "//arvr/libraries/portability:portability",
        "//arvr/libraries/vrs/gaia:curl_gaia_client",
        "//arvr/libraries/vrs/gaia:gaia",
        "//arvr/libraries/vrs/gaia/support:support",
        "//arvr/libraries/vrs/vrs:vrs",
        "//arvr/libraries/vrs/vrs/os:os",
        "//arvr/libraries/vrs/vrs/utils:strings",
    ],
)

oxx_static_library(
    name = "images",
    srcs = [
        "DecoderFactory.cpp",
        "PixelFrame.cpp",
        "PixelFrameJpeg.cpp",
        "PixelFramePng.cpp",
        "VideoFrameHandler.cpp",
        "VideoRecordFormatStreamPlayer.cpp",
    ],
    ovrsource_only = False,
    preprocessor_flags = ["-DUSE_OCEAN=0"] if is_cmake_generator else ["-DUSE_OCEAN=1"],
    public_include_directories = [
        "../..",
    ],
    public_raw_headers = [
        "DecoderFactory.h",
        "PixelFrame.h",
        "VideoFrameHandler.h",
        "VideoRecordFormatStreamPlayer.h",
    ],
    visibility = ["PUBLIC"],
    deps = [
        "//arvr/libraries/logging:logging",
        "//arvr/libraries/portability:portability",
        "//arvr/libraries/vrs/vrs/utils:strings",
        "//arvr/libraries/vrs/vrs:vrs",
        "//arvr/libraries/vrs/vrs/utils/converters:raw10_to_grey10_converter",
        "//arvr/third-party/jpeg:jpeg-turbo",
        "//arvr/third-party/png:png",
    ] + OCEAN_DEP,
)

oxx_static_library(
    name = "data_extractor",
    srcs = [
        "DataExtractor.cpp",
    ],
    ovrsource_only = False,
    public_include_directories = [
        "../..",
    ],
    public_raw_headers = [
        "DataExtractor.h",
        "DataExtractorReadMe.hpp",
    ],
    visibility = ["PUBLIC"],
    deps = [
        "//arvr/libraries/logging:logging",
        "//arvr/libraries/portability:portability",
        "//arvr/libraries/vrs/vrs:vrs",
        "//arvr/libraries/vrs/vrs/utils:images",
        "//arvr/libraries/vrs/vrs/utils:strings",
    ],
)

oxx_test(
    name = "unit_test_vrs_utils",
    srcs = glob(
        [
            "test/*.cpp",
        ],
    ),
    compatible_with = [
        "ovr_config//os:android",
        "ovr_config//os:linux",
        "ovr_config//os:windows",
        "ovr_config//os:macos",
        "ovr_config//os:iphoneos",
        "ovr_config//os:appletvos",
        "ovr_config//os:watchos",
    ],
    oncall = "arvr_gaia",
    preprocessor_flags = [
        "-DGTEST_BUILD",
    ],
    deps = [
        "//arvr/libraries/logging:advanced_backend",
        "//arvr/libraries/test_helpers:gtest_macros",
        "//arvr/libraries/vrs/vrs:vrs",
        "//arvr/libraries/vrs/vrs/utils:strings",
        "//arvr/libraries/vrs/vrs/utils:utils",
        "//arvr/libraries/vrs/vrs/utils/test/chess_codec:chess_codec",
        "//arvr/projects/xrtech/TestDataDir:TestDataDir",
    ],
)
